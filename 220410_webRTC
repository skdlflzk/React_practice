
웹소켓
Full-Duplex

웹소켓 이전의 기술
1 Polling - 서버로 일정 주기로 송신 / 응답
언제 데이터가 생길 지 모르기 때문에 주기적으로 통신.
불필요한 request, connection 생성
애매한 실시간성

2 Long polling - 서버에 요청을 보내고 이벤트가 생겨 응답받을떄까지
연결하지 않음. 응답이오면 끊고 재요청
끊임없이 하는 경우 Polling 과 차이가 없다.

3 Streaming - 서버에서 요청을 보내고 끊기지 않은 연결에서
끊임없이 데이터 수신. client server로 데이터 송신이 어렵다.


3가지 모두HTTP  -> header 낭비

WebSocket 등장!
-> handshake 는 http/https와 똑같다.
GET 을 사용해서 요청할 것.
헤더 내에
Upgrade : websocket 이라는 데이터가 있음.
-> 다음부터 websocket으로 변경될거라는 것을 지정
Connection: Upgrade
Sec-WebSocket-Protocol = 서버에서 지원하는 프로토콜응답
Sec-WebSocket-Key = 일치해야 응답

101 Switching Protocol?성공
프로토콜이 ws로 변경.

데이터를 주고 받을때단위는 message.
frame = 작은 헤더 + payload
그리고 UTF8 인코딩 , 0x00 ~ 0xff 로 데이터 주고받는다.

웹소켓? HTML5 이전의 기술로는 socket.io 를 사용해야함

... STOMP (채팅 통신을 하기위한 형식 정의)



브라우저를 서버에 연결시키는 것이 아닌
브라우저끼리 연결시키는 것은 어떨까?

그것이 webRTC
RealTimeCommunication
그것이 p2p, txt, video,audio 등이 가능한것! 
당연히 그것이 빠르다.

문제점? 사람이 많다면 - 업로딩을 엄청하거나 다운로드를 엄청하게된다.

RTC 강의듣기

https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbkd5ZjY0VlBGd2QxN1NJd3FUU0FkeTh1QnFtZ3xBQ3Jtc0ttN01hVkZhbS1pUkJTWHNUU0NsS2NSbmx2Tkk4MGEtZjhrTFhuVDlMUnpKY1lLVE4wS3J2SjNoSjhFQl9TcWZZYnVPVXhwTnZGcEhSRl83ODM3c1VhSFlleDFqMjM5SDlCdXh1M1ZmbHVCb0lDTXNTWQ&q=https%3A%2F%2Fnomadcoders.co%2Fnoom



